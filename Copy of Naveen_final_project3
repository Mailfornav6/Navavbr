{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1l12zzwGRfZUiwh-7l8emhZe4DmyLJ6Ap","timestamp":1715243260628}],"authorship_tag":"ABX9TyMHJrN+28OSbZwUcTEu9Oq8"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["Final Project"],"metadata":{"id":"2SldQPch147s"}},{"cell_type":"code","source":["import pandas as pd\n","\n","class SME():\n","\n","    def __init__(self):\n","        self.asked = 0\n","        self.df = self.get()\n","\n","    def get(self):\n","        X_train = pd.read_csv('https://raw.githubusercontent.com/msaricaumbc/DS_data/master/ds602/final3/X_train.csv')\n","        y_train = pd.read_csv('https://raw.githubusercontent.com/msaricaumbc/DS_data/master/ds602/final3/y_train.csv')\n","\n","        X_train['Left'] = y_train\n","        return X_train\n","\n","    def ask(self, gender, distance, years_worked, hire_date, prev_salary, current_salary, dep_code):\n","        self.asked += 1\n","        #  print(self.asked)\n","\n","        if self.asked > 500:\n","            raise Exception(\"Sorry, you have asked enough\")\n","\n","        result = self.df.query(f\"Gender=={gender} and Distance=='{distance}' and YearsWorked == {years_worked} and HireDate == '{hire_date}' and PreviousSalary == '{prev_salary}' and Salary == '{current_salary}' and DepartmentCode == {dep_code}\")\n","\n","        return result['Left'][0]"],"metadata":{"id":"ryxYvjJI1yTt","executionInfo":{"status":"ok","timestamp":1715235506082,"user_tz":240,"elapsed":125,"user":{"displayName":"Naveenkumar reddy","userId":"00261551837111136383"}}},"execution_count":48,"outputs":[]},{"cell_type":"code","source":["sme= SME()"],"metadata":{"id":"GuAdr7Zo11Pj","executionInfo":{"status":"ok","timestamp":1715237290121,"user_tz":240,"elapsed":278,"user":{"displayName":"Naveenkumar reddy","userId":"00261551837111136383"}}},"execution_count":84,"outputs":[]},{"cell_type":"code","source":["df = sme.get()"],"metadata":{"id":"unLTiely12LU","executionInfo":{"status":"ok","timestamp":1715237290642,"user_tz":240,"elapsed":264,"user":{"displayName":"Naveenkumar reddy","userId":"00261551837111136383"}}},"execution_count":85,"outputs":[]},{"cell_type":"code","source":["df.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":204},"id":"b7T6HEYf12U7","executionInfo":{"status":"ok","timestamp":1715237290643,"user_tz":240,"elapsed":8,"user":{"displayName":"Naveenkumar reddy","userId":"00261551837111136383"}},"outputId":"0abab961-af77-4248-b1ac-6b9091e1bef3"},"execution_count":86,"outputs":[{"output_type":"execute_result","data":{"text/plain":["   Gender  Distance  YearsWorked    HireDate PreviousSalary Salary  \\\n","0       0  ~20miles            8  2007-09-05            63K    66K   \n","1       0  >30miles            7  2011-10-16            60K    63K   \n","2       0  ~15miles            7  2011-05-18            59K    60K   \n","3       1    <5mile            3  2000-06-30            60K    61K   \n","4       1  ~10miles            9  2010-04-28            56K    57K   \n","\n","   DepartmentCode  Left  \n","0               3     1  \n","1               3     1  \n","2               3     0  \n","3               2     0  \n","4               7     0  "],"text/html":["\n","  <div id=\"df-d2e77263-b029-43fe-b5aa-50ec3595c66f\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Gender</th>\n","      <th>Distance</th>\n","      <th>YearsWorked</th>\n","      <th>HireDate</th>\n","      <th>PreviousSalary</th>\n","      <th>Salary</th>\n","      <th>DepartmentCode</th>\n","      <th>Left</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0</td>\n","      <td>~20miles</td>\n","      <td>8</td>\n","      <td>2007-09-05</td>\n","      <td>63K</td>\n","      <td>66K</td>\n","      <td>3</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>0</td>\n","      <td>&gt;30miles</td>\n","      <td>7</td>\n","      <td>2011-10-16</td>\n","      <td>60K</td>\n","      <td>63K</td>\n","      <td>3</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>0</td>\n","      <td>~15miles</td>\n","      <td>7</td>\n","      <td>2011-05-18</td>\n","      <td>59K</td>\n","      <td>60K</td>\n","      <td>3</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>1</td>\n","      <td>&lt;5mile</td>\n","      <td>3</td>\n","      <td>2000-06-30</td>\n","      <td>60K</td>\n","      <td>61K</td>\n","      <td>2</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>1</td>\n","      <td>~10miles</td>\n","      <td>9</td>\n","      <td>2010-04-28</td>\n","      <td>56K</td>\n","      <td>57K</td>\n","      <td>7</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-d2e77263-b029-43fe-b5aa-50ec3595c66f')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-d2e77263-b029-43fe-b5aa-50ec3595c66f button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-d2e77263-b029-43fe-b5aa-50ec3595c66f');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-6f835128-ce06-44e4-b0ee-b8e22c7a9465\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-6f835128-ce06-44e4-b0ee-b8e22c7a9465')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-6f835128-ce06-44e4-b0ee-b8e22c7a9465 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df","summary":"{\n  \"name\": \"df\",\n  \"rows\": 7500,\n  \"fields\": [\n    {\n      \"column\": \"Gender\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Distance\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \">30miles\",\n          \"~10miles\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"YearsWorked\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 1,\n        \"max\": 14,\n        \"num_unique_values\": 14,\n        \"samples\": [\n          12,\n          13\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"HireDate\",\n      \"properties\": {\n        \"dtype\": \"object\",\n        \"num_unique_values\": 4458,\n        \"samples\": [\n          \"2015-02-27\",\n          \"2011-11-21\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"PreviousSalary\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 22,\n        \"samples\": [\n          \"63K\",\n          \"66K\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Salary\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 25,\n        \"samples\": [\n          \"54K\",\n          \"55K\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"DepartmentCode\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2,\n        \"min\": 1,\n        \"max\": 7,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          3,\n          2\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Left\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":86}]},{"cell_type":"code","source":["df.Distance.nunique()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Hfc0cGRf12aG","executionInfo":{"status":"ok","timestamp":1715237290643,"user_tz":240,"elapsed":6,"user":{"displayName":"Naveenkumar reddy","userId":"00261551837111136383"}},"outputId":"ffca7e31-6877-4930-cc88-3580e9abf324"},"execution_count":87,"outputs":[{"output_type":"execute_result","data":{"text/plain":["5"]},"metadata":{},"execution_count":87}]},{"cell_type":"markdown","source":["Data handling"],"metadata":{"id":"4AqCVDyH4hRO"}},{"cell_type":"code","source":["df.columns"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"0XT42gUJ3Zc6","executionInfo":{"status":"ok","timestamp":1715237290643,"user_tz":240,"elapsed":5,"user":{"displayName":"Naveenkumar reddy","userId":"00261551837111136383"}},"outputId":"26f0a398-052e-47eb-d14d-b86c66f939ba"},"execution_count":88,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Index(['Gender', 'Distance', 'YearsWorked', 'HireDate', 'PreviousSalary',\n","       'Salary', 'DepartmentCode', 'Left'],\n","      dtype='object')"]},"metadata":{},"execution_count":88}]},{"cell_type":"code","source":["df.nunique()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"FrbvJSmV4mdA","executionInfo":{"status":"ok","timestamp":1715237290643,"user_tz":240,"elapsed":4,"user":{"displayName":"Naveenkumar reddy","userId":"00261551837111136383"}},"outputId":"96e681ba-cfb8-4d7e-86cf-e805d788181b"},"execution_count":89,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Gender               2\n","Distance             5\n","YearsWorked         14\n","HireDate          4458\n","PreviousSalary      22\n","Salary              25\n","DepartmentCode       6\n","Left                 2\n","dtype: int64"]},"metadata":{},"execution_count":89}]},{"cell_type":"code","source":["df.isnull().sum()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"2UvS13W84sSm","executionInfo":{"status":"ok","timestamp":1715237290643,"user_tz":240,"elapsed":3,"user":{"displayName":"Naveenkumar reddy","userId":"00261551837111136383"}},"outputId":"c5bb9456-963d-4f95-b0f5-b0cbd4f35327"},"execution_count":90,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Gender             0\n","Distance          10\n","YearsWorked        0\n","HireDate           0\n","PreviousSalary     0\n","Salary             0\n","DepartmentCode     0\n","Left               0\n","dtype: int64"]},"metadata":{},"execution_count":90}]},{"cell_type":"code","source":["X_train = pd.read_csv('https://raw.githubusercontent.com/msaricaumbc/DS_data/master/ds602/final3/X_train.csv')\n","X_test = pd.read_csv('https://raw.githubusercontent.com/msaricaumbc/DS_data/master/ds602/final3/X_test.csv')\n","y_test = pd.read_csv('https://raw.githubusercontent.com/msaricaumbc/DS_data/master/ds602/final3/y_test.csv')"],"metadata":{"id":"eHzTzUnA5kqo","executionInfo":{"status":"ok","timestamp":1715237290931,"user_tz":240,"elapsed":291,"user":{"displayName":"Naveenkumar reddy","userId":"00261551837111136383"}}},"execution_count":91,"outputs":[]},{"cell_type":"code","source":["X_train"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":419},"id":"EeJgOEsP6XQT","executionInfo":{"status":"ok","timestamp":1715237290932,"user_tz":240,"elapsed":10,"user":{"displayName":"Naveenkumar reddy","userId":"00261551837111136383"}},"outputId":"9882fb8c-3291-4029-e86f-460529eb2a77"},"execution_count":92,"outputs":[{"output_type":"execute_result","data":{"text/plain":["      Gender  Distance  YearsWorked    HireDate PreviousSalary Salary  \\\n","0          0  ~20miles            8  2007-09-05            63K    66K   \n","1          0  >30miles            7  2011-10-16            60K    63K   \n","2          0  ~15miles            7  2011-05-18            59K    60K   \n","3          1    <5mile            3  2000-06-30            60K    61K   \n","4          1  ~10miles            9  2010-04-28            56K    57K   \n","...      ...       ...          ...         ...            ...    ...   \n","7495       0  >30miles            5  2014-03-15            60K    62K   \n","7496       0  ~10miles            7  2011-07-10            64K    68K   \n","7497       0  ~10miles            8  2006-08-19            56K    57K   \n","7498       0  ~20miles            6  2016-09-18            60K    62K   \n","7499       0  ~20miles            5  2013-12-26            57K    58K   \n","\n","      DepartmentCode  \n","0                  3  \n","1                  3  \n","2                  3  \n","3                  2  \n","4                  7  \n","...              ...  \n","7495               6  \n","7496               3  \n","7497               2  \n","7498               5  \n","7499               7  \n","\n","[7500 rows x 7 columns]"],"text/html":["\n","  <div id=\"df-4673fabf-a49a-4a63-8e32-3142d894d7d3\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Gender</th>\n","      <th>Distance</th>\n","      <th>YearsWorked</th>\n","      <th>HireDate</th>\n","      <th>PreviousSalary</th>\n","      <th>Salary</th>\n","      <th>DepartmentCode</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0</td>\n","      <td>~20miles</td>\n","      <td>8</td>\n","      <td>2007-09-05</td>\n","      <td>63K</td>\n","      <td>66K</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>0</td>\n","      <td>&gt;30miles</td>\n","      <td>7</td>\n","      <td>2011-10-16</td>\n","      <td>60K</td>\n","      <td>63K</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>0</td>\n","      <td>~15miles</td>\n","      <td>7</td>\n","      <td>2011-05-18</td>\n","      <td>59K</td>\n","      <td>60K</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>1</td>\n","      <td>&lt;5mile</td>\n","      <td>3</td>\n","      <td>2000-06-30</td>\n","      <td>60K</td>\n","      <td>61K</td>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>1</td>\n","      <td>~10miles</td>\n","      <td>9</td>\n","      <td>2010-04-28</td>\n","      <td>56K</td>\n","      <td>57K</td>\n","      <td>7</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>7495</th>\n","      <td>0</td>\n","      <td>&gt;30miles</td>\n","      <td>5</td>\n","      <td>2014-03-15</td>\n","      <td>60K</td>\n","      <td>62K</td>\n","      <td>6</td>\n","    </tr>\n","    <tr>\n","      <th>7496</th>\n","      <td>0</td>\n","      <td>~10miles</td>\n","      <td>7</td>\n","      <td>2011-07-10</td>\n","      <td>64K</td>\n","      <td>68K</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>7497</th>\n","      <td>0</td>\n","      <td>~10miles</td>\n","      <td>8</td>\n","      <td>2006-08-19</td>\n","      <td>56K</td>\n","      <td>57K</td>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>7498</th>\n","      <td>0</td>\n","      <td>~20miles</td>\n","      <td>6</td>\n","      <td>2016-09-18</td>\n","      <td>60K</td>\n","      <td>62K</td>\n","      <td>5</td>\n","    </tr>\n","    <tr>\n","      <th>7499</th>\n","      <td>0</td>\n","      <td>~20miles</td>\n","      <td>5</td>\n","      <td>2013-12-26</td>\n","      <td>57K</td>\n","      <td>58K</td>\n","      <td>7</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>7500 rows × 7 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-4673fabf-a49a-4a63-8e32-3142d894d7d3')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-4673fabf-a49a-4a63-8e32-3142d894d7d3 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-4673fabf-a49a-4a63-8e32-3142d894d7d3');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-581b4801-539b-4e42-a0dc-7728765dbd5a\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-581b4801-539b-4e42-a0dc-7728765dbd5a')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-581b4801-539b-4e42-a0dc-7728765dbd5a button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_26abb88a-da32-4e4b-8fb1-d0bc1cc8580b\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('X_train')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_26abb88a-da32-4e4b-8fb1-d0bc1cc8580b button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('X_train');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"X_train","summary":"{\n  \"name\": \"X_train\",\n  \"rows\": 7500,\n  \"fields\": [\n    {\n      \"column\": \"Gender\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Distance\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \">30miles\",\n          \"~10miles\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"YearsWorked\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 1,\n        \"max\": 14,\n        \"num_unique_values\": 14,\n        \"samples\": [\n          12,\n          13\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"HireDate\",\n      \"properties\": {\n        \"dtype\": \"object\",\n        \"num_unique_values\": 4458,\n        \"samples\": [\n          \"2015-02-27\",\n          \"2011-11-21\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"PreviousSalary\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 22,\n        \"samples\": [\n          \"63K\",\n          \"66K\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Salary\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 25,\n        \"samples\": [\n          \"54K\",\n          \"55K\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"DepartmentCode\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2,\n        \"min\": 1,\n        \"max\": 7,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          3,\n          2\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":92}]},{"cell_type":"code","source":["X_train.isnull().sum()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"sxGQ7Tt76XTE","executionInfo":{"status":"ok","timestamp":1715237290932,"user_tz":240,"elapsed":9,"user":{"displayName":"Naveenkumar reddy","userId":"00261551837111136383"}},"outputId":"af83ad47-ce48-443d-cf3d-70a9fa2be865"},"execution_count":93,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Gender             0\n","Distance          10\n","YearsWorked        0\n","HireDate           0\n","PreviousSalary     0\n","Salary             0\n","DepartmentCode     0\n","dtype: int64"]},"metadata":{},"execution_count":93}]},{"cell_type":"code","source":["X_train.nunique()"],"metadata":{"id":"C8lkX2366XWE","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1715237290932,"user_tz":240,"elapsed":8,"user":{"displayName":"Naveenkumar reddy","userId":"00261551837111136383"}},"outputId":"f7b08a9f-4223-4776-e26c-932bdb0cff94"},"execution_count":94,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Gender               2\n","Distance             5\n","YearsWorked         14\n","HireDate          4458\n","PreviousSalary      22\n","Salary              25\n","DepartmentCode       6\n","dtype: int64"]},"metadata":{},"execution_count":94}]},{"cell_type":"code","source":["X_train.PreviousSalary.value_counts()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"T2Cl05MUnfcI","executionInfo":{"status":"ok","timestamp":1715237290932,"user_tz":240,"elapsed":6,"user":{"displayName":"Naveenkumar reddy","userId":"00261551837111136383"}},"outputId":"07d8edf9-814e-4e3e-850b-9201bc3e5aab"},"execution_count":95,"outputs":[{"output_type":"execute_result","data":{"text/plain":["PreviousSalary\n","60K    983\n","59K    954\n","61K    920\n","58K    811\n","62K    747\n","57K    633\n","63K    573\n","56K    455\n","64K    350\n","55K    327\n","54K    203\n","65K    188\n","53K    122\n","66K     96\n","52K     53\n","51K     28\n","67K     25\n","50K     15\n","68K      8\n","49K      5\n","48K      3\n","69K      1\n","Name: count, dtype: int64"]},"metadata":{},"execution_count":95}]},{"cell_type":"code","source":["def convert_salary(df, columns):\n","    for col in columns:\n","        df[col] = df[col].apply(lambda x: float(x.replace('K', '')) * 1000 if 'K' in x else float(x))\n","    return df\n","\n","columns_to_convert = ['PreviousSalary', 'Salary']\n","X_train = convert_salary(X_train, columns_to_convert)\n","X_test = convert_salary(X_test, columns_to_convert)"],"metadata":{"id":"hOr63A1qnfuY","executionInfo":{"status":"ok","timestamp":1715237290932,"user_tz":240,"elapsed":5,"user":{"displayName":"Naveenkumar reddy","userId":"00261551837111136383"}}},"execution_count":96,"outputs":[]},{"cell_type":"code","source":["X_train"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":419},"id":"Md75_sVDoeuR","executionInfo":{"status":"ok","timestamp":1715237290932,"user_tz":240,"elapsed":5,"user":{"displayName":"Naveenkumar reddy","userId":"00261551837111136383"}},"outputId":"1d117301-c734-4809-c402-7264df5b7cb2"},"execution_count":97,"outputs":[{"output_type":"execute_result","data":{"text/plain":["      Gender  Distance  YearsWorked    HireDate  PreviousSalary   Salary  \\\n","0          0  ~20miles            8  2007-09-05         63000.0  66000.0   \n","1          0  >30miles            7  2011-10-16         60000.0  63000.0   \n","2          0  ~15miles            7  2011-05-18         59000.0  60000.0   \n","3          1    <5mile            3  2000-06-30         60000.0  61000.0   \n","4          1  ~10miles            9  2010-04-28         56000.0  57000.0   \n","...      ...       ...          ...         ...             ...      ...   \n","7495       0  >30miles            5  2014-03-15         60000.0  62000.0   \n","7496       0  ~10miles            7  2011-07-10         64000.0  68000.0   \n","7497       0  ~10miles            8  2006-08-19         56000.0  57000.0   \n","7498       0  ~20miles            6  2016-09-18         60000.0  62000.0   \n","7499       0  ~20miles            5  2013-12-26         57000.0  58000.0   \n","\n","      DepartmentCode  \n","0                  3  \n","1                  3  \n","2                  3  \n","3                  2  \n","4                  7  \n","...              ...  \n","7495               6  \n","7496               3  \n","7497               2  \n","7498               5  \n","7499               7  \n","\n","[7500 rows x 7 columns]"],"text/html":["\n","  <div id=\"df-1b5a758d-9b42-457c-a997-9f5c11cdaada\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Gender</th>\n","      <th>Distance</th>\n","      <th>YearsWorked</th>\n","      <th>HireDate</th>\n","      <th>PreviousSalary</th>\n","      <th>Salary</th>\n","      <th>DepartmentCode</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0</td>\n","      <td>~20miles</td>\n","      <td>8</td>\n","      <td>2007-09-05</td>\n","      <td>63000.0</td>\n","      <td>66000.0</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>0</td>\n","      <td>&gt;30miles</td>\n","      <td>7</td>\n","      <td>2011-10-16</td>\n","      <td>60000.0</td>\n","      <td>63000.0</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>0</td>\n","      <td>~15miles</td>\n","      <td>7</td>\n","      <td>2011-05-18</td>\n","      <td>59000.0</td>\n","      <td>60000.0</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>1</td>\n","      <td>&lt;5mile</td>\n","      <td>3</td>\n","      <td>2000-06-30</td>\n","      <td>60000.0</td>\n","      <td>61000.0</td>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>1</td>\n","      <td>~10miles</td>\n","      <td>9</td>\n","      <td>2010-04-28</td>\n","      <td>56000.0</td>\n","      <td>57000.0</td>\n","      <td>7</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>7495</th>\n","      <td>0</td>\n","      <td>&gt;30miles</td>\n","      <td>5</td>\n","      <td>2014-03-15</td>\n","      <td>60000.0</td>\n","      <td>62000.0</td>\n","      <td>6</td>\n","    </tr>\n","    <tr>\n","      <th>7496</th>\n","      <td>0</td>\n","      <td>~10miles</td>\n","      <td>7</td>\n","      <td>2011-07-10</td>\n","      <td>64000.0</td>\n","      <td>68000.0</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>7497</th>\n","      <td>0</td>\n","      <td>~10miles</td>\n","      <td>8</td>\n","      <td>2006-08-19</td>\n","      <td>56000.0</td>\n","      <td>57000.0</td>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>7498</th>\n","      <td>0</td>\n","      <td>~20miles</td>\n","      <td>6</td>\n","      <td>2016-09-18</td>\n","      <td>60000.0</td>\n","      <td>62000.0</td>\n","      <td>5</td>\n","    </tr>\n","    <tr>\n","      <th>7499</th>\n","      <td>0</td>\n","      <td>~20miles</td>\n","      <td>5</td>\n","      <td>2013-12-26</td>\n","      <td>57000.0</td>\n","      <td>58000.0</td>\n","      <td>7</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>7500 rows × 7 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-1b5a758d-9b42-457c-a997-9f5c11cdaada')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-1b5a758d-9b42-457c-a997-9f5c11cdaada button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-1b5a758d-9b42-457c-a997-9f5c11cdaada');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-80029014-7a27-40f4-a836-308994d4eb7b\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-80029014-7a27-40f4-a836-308994d4eb7b')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-80029014-7a27-40f4-a836-308994d4eb7b button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_05878b61-e429-41e3-b149-b6bc2804efcf\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('X_train')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_05878b61-e429-41e3-b149-b6bc2804efcf button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('X_train');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"X_train","summary":"{\n  \"name\": \"X_train\",\n  \"rows\": 7500,\n  \"fields\": [\n    {\n      \"column\": \"Gender\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Distance\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \">30miles\",\n          \"~10miles\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"YearsWorked\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 1,\n        \"max\": 14,\n        \"num_unique_values\": 14,\n        \"samples\": [\n          12,\n          13\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"HireDate\",\n      \"properties\": {\n        \"dtype\": \"object\",\n        \"num_unique_values\": 4458,\n        \"samples\": [\n          \"2015-02-27\",\n          \"2011-11-21\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"PreviousSalary\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3049.199087886177,\n        \"min\": 48000.0,\n        \"max\": 69000.0,\n        \"num_unique_values\": 22,\n        \"samples\": [\n          63000.0,\n          66000.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Salary\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3228.3958040309362,\n        \"min\": 48000.0,\n        \"max\": 72000.0,\n        \"num_unique_values\": 25,\n        \"samples\": [\n          54000.0,\n          55000.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"DepartmentCode\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2,\n        \"min\": 1,\n        \"max\": 7,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          3,\n          2\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":97}]},{"cell_type":"code","source":["X_train = X_train.drop('HireDate',axis=1)"],"metadata":{"id":"og9RTwqF6XhZ","executionInfo":{"status":"ok","timestamp":1715237291219,"user_tz":240,"elapsed":291,"user":{"displayName":"Naveenkumar reddy","userId":"00261551837111136383"}}},"execution_count":98,"outputs":[]},{"cell_type":"code","source":["X_test = X_test.drop('HireDate',axis=1)"],"metadata":{"id":"-4EoVqUN6XlA","executionInfo":{"status":"ok","timestamp":1715237291219,"user_tz":240,"elapsed":8,"user":{"displayName":"Naveenkumar reddy","userId":"00261551837111136383"}}},"execution_count":99,"outputs":[]},{"cell_type":"markdown","source":["EDA"],"metadata":{"id":"WlnAl0ucpwYi"}},{"cell_type":"code","source":[],"metadata":{"id":"k2uUr8LNpsAZ","executionInfo":{"status":"ok","timestamp":1715237291219,"user_tz":240,"elapsed":7,"user":{"displayName":"Naveenkumar reddy","userId":"00261551837111136383"}}},"execution_count":99,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"NAjCJqSupysc","executionInfo":{"status":"ok","timestamp":1715237291219,"user_tz":240,"elapsed":7,"user":{"displayName":"Naveenkumar reddy","userId":"00261551837111136383"}}},"execution_count":99,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"82hzKS1_pyvU","executionInfo":{"status":"ok","timestamp":1715237291219,"user_tz":240,"elapsed":7,"user":{"displayName":"Naveenkumar reddy","userId":"00261551837111136383"}}},"execution_count":99,"outputs":[]},{"cell_type":"markdown","source":["Column handling"],"metadata":{"id":"JuhTtsaip4cL"}},{"cell_type":"code","source":["X_train"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":419},"id":"qB9NHSgGp43T","executionInfo":{"status":"ok","timestamp":1715237291219,"user_tz":240,"elapsed":7,"user":{"displayName":"Naveenkumar reddy","userId":"00261551837111136383"}},"outputId":"61baa15c-0e04-4323-9a28-abf62014185c"},"execution_count":100,"outputs":[{"output_type":"execute_result","data":{"text/plain":["      Gender  Distance  YearsWorked  PreviousSalary   Salary  DepartmentCode\n","0          0  ~20miles            8         63000.0  66000.0               3\n","1          0  >30miles            7         60000.0  63000.0               3\n","2          0  ~15miles            7         59000.0  60000.0               3\n","3          1    <5mile            3         60000.0  61000.0               2\n","4          1  ~10miles            9         56000.0  57000.0               7\n","...      ...       ...          ...             ...      ...             ...\n","7495       0  >30miles            5         60000.0  62000.0               6\n","7496       0  ~10miles            7         64000.0  68000.0               3\n","7497       0  ~10miles            8         56000.0  57000.0               2\n","7498       0  ~20miles            6         60000.0  62000.0               5\n","7499       0  ~20miles            5         57000.0  58000.0               7\n","\n","[7500 rows x 6 columns]"],"text/html":["\n","  <div id=\"df-1bc41228-3a89-4c31-99bf-2375941b44ea\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Gender</th>\n","      <th>Distance</th>\n","      <th>YearsWorked</th>\n","      <th>PreviousSalary</th>\n","      <th>Salary</th>\n","      <th>DepartmentCode</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0</td>\n","      <td>~20miles</td>\n","      <td>8</td>\n","      <td>63000.0</td>\n","      <td>66000.0</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>0</td>\n","      <td>&gt;30miles</td>\n","      <td>7</td>\n","      <td>60000.0</td>\n","      <td>63000.0</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>0</td>\n","      <td>~15miles</td>\n","      <td>7</td>\n","      <td>59000.0</td>\n","      <td>60000.0</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>1</td>\n","      <td>&lt;5mile</td>\n","      <td>3</td>\n","      <td>60000.0</td>\n","      <td>61000.0</td>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>1</td>\n","      <td>~10miles</td>\n","      <td>9</td>\n","      <td>56000.0</td>\n","      <td>57000.0</td>\n","      <td>7</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>7495</th>\n","      <td>0</td>\n","      <td>&gt;30miles</td>\n","      <td>5</td>\n","      <td>60000.0</td>\n","      <td>62000.0</td>\n","      <td>6</td>\n","    </tr>\n","    <tr>\n","      <th>7496</th>\n","      <td>0</td>\n","      <td>~10miles</td>\n","      <td>7</td>\n","      <td>64000.0</td>\n","      <td>68000.0</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>7497</th>\n","      <td>0</td>\n","      <td>~10miles</td>\n","      <td>8</td>\n","      <td>56000.0</td>\n","      <td>57000.0</td>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>7498</th>\n","      <td>0</td>\n","      <td>~20miles</td>\n","      <td>6</td>\n","      <td>60000.0</td>\n","      <td>62000.0</td>\n","      <td>5</td>\n","    </tr>\n","    <tr>\n","      <th>7499</th>\n","      <td>0</td>\n","      <td>~20miles</td>\n","      <td>5</td>\n","      <td>57000.0</td>\n","      <td>58000.0</td>\n","      <td>7</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>7500 rows × 6 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-1bc41228-3a89-4c31-99bf-2375941b44ea')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-1bc41228-3a89-4c31-99bf-2375941b44ea button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-1bc41228-3a89-4c31-99bf-2375941b44ea');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-cdf89635-8ab6-4c1e-9dd2-86cec81e5998\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-cdf89635-8ab6-4c1e-9dd2-86cec81e5998')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-cdf89635-8ab6-4c1e-9dd2-86cec81e5998 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_31a87003-2fbd-4a6b-a309-e7f575690868\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('X_train')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_31a87003-2fbd-4a6b-a309-e7f575690868 button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('X_train');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"X_train","summary":"{\n  \"name\": \"X_train\",\n  \"rows\": 7500,\n  \"fields\": [\n    {\n      \"column\": \"Gender\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Distance\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \">30miles\",\n          \"~10miles\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"YearsWorked\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 1,\n        \"max\": 14,\n        \"num_unique_values\": 14,\n        \"samples\": [\n          12,\n          13\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"PreviousSalary\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3049.199087886177,\n        \"min\": 48000.0,\n        \"max\": 69000.0,\n        \"num_unique_values\": 22,\n        \"samples\": [\n          63000.0,\n          66000.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Salary\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3228.3958040309362,\n        \"min\": 48000.0,\n        \"max\": 72000.0,\n        \"num_unique_values\": 25,\n        \"samples\": [\n          54000.0,\n          55000.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"DepartmentCode\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2,\n        \"min\": 1,\n        \"max\": 7,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          3,\n          2\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":100}]},{"cell_type":"code","source":["from sklearn.impute import SimpleImputer\n","import pandas as pd\n","\n","# Assuming X_train is your DataFrame\n","numerical_cols = ['YearsWorked', 'PreviousSalary', 'Salary']\n","categorical_cols = ['Gender', 'Distance', 'DepartmentCode']\n","\n","# Instantiate SimpleImputer for numerical columns with strategy as 'median'\n","numerical_imputer = SimpleImputer(strategy='median')\n","X_train[numerical_cols] = numerical_imputer.fit_transform(X_train[numerical_cols])\n","\n","X_train_org = X_train.copy()\n","\n","# Instantiate SimpleImputer for categorical columns with strategy as 'most_frequent'\n","categorical_imputer = SimpleImputer(strategy='most_frequent')\n","X_train[categorical_cols] = categorical_imputer.fit_transform(X_train[categorical_cols])"],"metadata":{"id":"KDAh3UNlp48x","executionInfo":{"status":"ok","timestamp":1715237291219,"user_tz":240,"elapsed":5,"user":{"displayName":"Naveenkumar reddy","userId":"00261551837111136383"}}},"execution_count":101,"outputs":[]},{"cell_type":"code","source":["#One hot encoding\n","import pandas as pd\n","\n","# Assuming X_train is your DataFrame with categorical columns already imputed\n","categorical_cols = ['Gender', 'Distance', 'DepartmentCode']\n","\n","# Perform one-hot encoding on categorical columns\n","X_train_encoded = pd.get_dummies(X_train, columns=categorical_cols)\n","\n","# Display the encoded DataFrame\n","print(X_train_encoded.head())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"yXTOziAvrPlT","executionInfo":{"status":"ok","timestamp":1715238730244,"user_tz":240,"elapsed":138,"user":{"displayName":"Naveenkumar reddy","userId":"00261551837111136383"}},"outputId":"6450d028-4aa4-40f7-c2d4-5b5a14a605a8"},"execution_count":139,"outputs":[{"output_type":"stream","name":"stdout","text":["   YearsWorked  PreviousSalary   Salary  Gender_0  Gender_1  Distance_<5mile  \\\n","0          8.0         63000.0  66000.0      True     False            False   \n","1          7.0         60000.0  63000.0      True     False            False   \n","2          7.0         59000.0  60000.0      True     False            False   \n","3          3.0         60000.0  61000.0     False      True             True   \n","4          9.0         56000.0  57000.0     False      True            False   \n","\n","   Distance_>30miles  Distance_~10miles  Distance_~15miles  Distance_~20miles  \\\n","0              False              False              False               True   \n","1               True              False              False              False   \n","2              False              False               True              False   \n","3              False              False              False              False   \n","4              False               True              False              False   \n","\n","   DepartmentCode_1  DepartmentCode_2  DepartmentCode_3  DepartmentCode_5  \\\n","0             False             False              True             False   \n","1             False             False              True             False   \n","2             False             False              True             False   \n","3             False              True             False             False   \n","4             False             False             False             False   \n","\n","   DepartmentCode_6  DepartmentCode_7  \n","0             False             False  \n","1             False             False  \n","2             False             False  \n","3             False             False  \n","4             False              True  \n"]}]},{"cell_type":"code","source":["X_test_encoded = pd.get_dummies(X_test, columns=categorical_cols)"],"metadata":{"id":"CUV-EtNxMa0n","executionInfo":{"status":"ok","timestamp":1715238748929,"user_tz":240,"elapsed":161,"user":{"displayName":"Naveenkumar reddy","userId":"00261551837111136383"}}},"execution_count":140,"outputs":[]},{"cell_type":"code","source":["from sklearn.cluster import KMeans\n","from sklearn.metrics import silhouette_score\n","import matplotlib.pyplot as plt\n","\n","# Assuming X_train_encoded is your DataFrame with one-hot encoded categorical columns\n","\n","# Define a range of possible cluster numbers to try\n","min_clusters = 2\n","max_clusters = 10\n","cluster_range = range(min_clusters, max_clusters + 1)\n","\n","# Initialize lists to store silhouette scores and cluster labels\n","silhouette_scores = []\n","cluster_labels_list = []\n","\n","# Calculate silhouette score for each number of clusters\n","for num_clusters in cluster_range:\n","    kmeans = KMeans(n_clusters=num_clusters, random_state=42)\n","    cluster_labels = kmeans.fit_predict(X_train_encoded)\n","    silhouette_avg = silhouette_score(X_train_encoded, cluster_labels)\n","    silhouette_scores.append(silhouette_avg)\n","    cluster_labels_list.append(cluster_labels)\n","\n","# Plotting the silhouette scores\n","plt.figure(figsize=(10, 6))\n","plt.plot(cluster_range, silhouette_scores, marker='o')\n","plt.xlabel('Number of Clusters')\n","plt.ylabel('Silhouette Score')\n","plt.title('Silhouette Score vs Number of Clusters')\n","plt.xticks(cluster_range)\n","plt.grid(True)\n","plt.show()\n","\n","# Determine the best number of clusters based on the silhouette score\n","best_num_clusters = cluster_range[silhouette_scores.index(max(silhouette_scores))]\n","print(f\"Best number of clusters based on silhouette score: {best_num_clusters}\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":926},"id":"LLj98aCdsLwM","executionInfo":{"status":"ok","timestamp":1715237308129,"user_tz":240,"elapsed":16913,"user":{"displayName":"Naveenkumar reddy","userId":"00261551837111136383"}},"outputId":"05980452-aa1d-45f4-8cd7-b4143b4b7e53"},"execution_count":103,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/cluster/_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n","  warnings.warn(\n","/usr/local/lib/python3.10/dist-packages/sklearn/cluster/_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n","  warnings.warn(\n","/usr/local/lib/python3.10/dist-packages/sklearn/cluster/_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n","  warnings.warn(\n","/usr/local/lib/python3.10/dist-packages/sklearn/cluster/_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n","  warnings.warn(\n","/usr/local/lib/python3.10/dist-packages/sklearn/cluster/_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n","  warnings.warn(\n","/usr/local/lib/python3.10/dist-packages/sklearn/cluster/_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n","  warnings.warn(\n","/usr/local/lib/python3.10/dist-packages/sklearn/cluster/_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n","  warnings.warn(\n","/usr/local/lib/python3.10/dist-packages/sklearn/cluster/_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n","  warnings.warn(\n","/usr/local/lib/python3.10/dist-packages/sklearn/cluster/_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n","  warnings.warn(\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x600 with 1 Axes>"],"image/png":"\n"},"metadata":{}},{"output_type":"stream","name":"stdout","text":["Best number of clusters based on silhouette score: 2\n"]}]},{"cell_type":"code","source":[],"metadata":{"id":"fwpGuS8Psizb","executionInfo":{"status":"ok","timestamp":1715237308129,"user_tz":240,"elapsed":2,"user":{"displayName":"Naveenkumar reddy","userId":"00261551837111136383"}}},"execution_count":103,"outputs":[]},{"cell_type":"code","source":["from sklearn.cluster import KMeans\n","import matplotlib.pyplot as plt\n","\n","# Assuming X_train_encoded is your DataFrame with one-hot encoded categorical columns\n","\n","# Define a range of possible cluster numbers to try\n","min_clusters = 2\n","max_clusters = 10\n","cluster_range = range(min_clusters, max_clusters + 1)\n","\n","# Initialize list to store inertia values\n","inertia_values = []\n","\n","# Calculate inertia for each number of clusters\n","for num_clusters in cluster_range:\n","    kmeans = KMeans(n_clusters=num_clusters, random_state=42)\n","    kmeans.fit(X_train_encoded)\n","    inertia_values.append(kmeans.inertia_)\n","\n","# Plotting the inertia values\n","plt.figure(figsize=(10, 6))\n","plt.plot(cluster_range, inertia_values, marker='o')\n","plt.xlabel('Number of Clusters')\n","plt.ylabel('Inertia')\n","plt.title('Inertia vs Number of Clusters')\n","plt.xticks(cluster_range)\n","plt.grid(True)\n","plt.show()\n","\n","# Determine the best number of clusters based on the inertia\n","best_num_clusters = cluster_range[inertia_values.index(min(inertia_values))]\n","print(f\"Best number of clusters based on inertia: {best_num_clusters}\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":926},"id":"-lQ1iF3suVP0","executionInfo":{"status":"ok","timestamp":1715237315025,"user_tz":240,"elapsed":6897,"user":{"displayName":"Naveenkumar reddy","userId":"00261551837111136383"}},"outputId":"f8953f0c-3f35-4909-8a57-34d4b21966a4"},"execution_count":104,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/cluster/_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n","  warnings.warn(\n","/usr/local/lib/python3.10/dist-packages/sklearn/cluster/_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n","  warnings.warn(\n","/usr/local/lib/python3.10/dist-packages/sklearn/cluster/_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n","  warnings.warn(\n","/usr/local/lib/python3.10/dist-packages/sklearn/cluster/_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n","  warnings.warn(\n","/usr/local/lib/python3.10/dist-packages/sklearn/cluster/_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n","  warnings.warn(\n","/usr/local/lib/python3.10/dist-packages/sklearn/cluster/_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n","  warnings.warn(\n","/usr/local/lib/python3.10/dist-packages/sklearn/cluster/_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n","  warnings.warn(\n","/usr/local/lib/python3.10/dist-packages/sklearn/cluster/_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n","  warnings.warn(\n","/usr/local/lib/python3.10/dist-packages/sklearn/cluster/_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n","  warnings.warn(\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x600 with 1 Axes>"],"image/png":"\n"},"metadata":{}},{"output_type":"stream","name":"stdout","text":["Best number of clusters based on inertia: 10\n"]}]},{"cell_type":"code","source":["from sklearn.cluster import KMeans\n","\n","# Assuming X_train_encoded is your DataFrame with one-hot encoded categorical columns\n","\n","# Instantiate KMeans with the desired number of clusters\n","num_clusters = 4  # You can adjust this as needed\n","kmeans = KMeans(n_clusters=num_clusters, random_state=42)\n","\n","# Fit KMeans to the data\n","kmeans.fit(X_train_encoded)\n","\n","# Add cluster labels to the DataFrame\n","X_train_encoded['ClusterLabel'] = kmeans.labels_\n","\n","# Display the DataFrame with cluster labels\n","print(X_train_encoded.head())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"o4RvZf-ouWOt","executionInfo":{"status":"ok","timestamp":1715237315524,"user_tz":240,"elapsed":503,"user":{"displayName":"Naveenkumar reddy","userId":"00261551837111136383"}},"outputId":"7b616f40-bdc7-4b15-b463-dc5f9a004e4d"},"execution_count":105,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/cluster/_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n","  warnings.warn(\n"]},{"output_type":"stream","name":"stdout","text":["   YearsWorked  PreviousSalary   Salary  Gender_0  Gender_1  Distance_<5mile  \\\n","0          8.0         63000.0  66000.0      True     False            False   \n","1          7.0         60000.0  63000.0      True     False            False   \n","2          7.0         59000.0  60000.0      True     False            False   \n","3          3.0         60000.0  61000.0     False      True             True   \n","4          9.0         56000.0  57000.0     False      True            False   \n","\n","   Distance_>30miles  Distance_~10miles  Distance_~15miles  Distance_~20miles  \\\n","0              False              False              False               True   \n","1               True              False              False              False   \n","2              False              False               True              False   \n","3              False              False              False              False   \n","4              False               True              False              False   \n","\n","   DepartmentCode_1  DepartmentCode_2  DepartmentCode_3  DepartmentCode_5  \\\n","0             False             False              True             False   \n","1             False             False              True             False   \n","2             False             False              True             False   \n","3             False              True             False             False   \n","4             False             False             False             False   \n","\n","   DepartmentCode_6  DepartmentCode_7  ClusterLabel  \n","0             False             False             1  \n","1             False             False             2  \n","2             False             False             0  \n","3             False             False             2  \n","4             False              True             3  \n"]}]},{"cell_type":"code","source":["import pandas as pd\n","\n","# Assuming you have loaded your final dataset X_train and original dataset X_train_org\n","\n","# Assuming X_train contains 'ClusterLabel' column representing cluster labels\n","\n","# Add a new column 'ClusterLabel' to X_train_org and assign cluster labels from X_train\n","X_train_org['ClusterLabel'] = X_train_encoded['ClusterLabel']\n","\n","# Now X_train_org contains the same cluster labels as X_train\n","print(X_train_org.head())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"2ojJCjvl9tHk","executionInfo":{"status":"ok","timestamp":1715237315524,"user_tz":240,"elapsed":3,"user":{"displayName":"Naveenkumar reddy","userId":"00261551837111136383"}},"outputId":"cf456b14-9386-420f-d33a-cf19eb10b864"},"execution_count":106,"outputs":[{"output_type":"stream","name":"stdout","text":["   Gender  Distance  YearsWorked  PreviousSalary   Salary  DepartmentCode  \\\n","0       0  ~20miles          8.0         63000.0  66000.0               3   \n","1       0  >30miles          7.0         60000.0  63000.0               3   \n","2       0  ~15miles          7.0         59000.0  60000.0               3   \n","3       1    <5mile          3.0         60000.0  61000.0               2   \n","4       1  ~10miles          9.0         56000.0  57000.0               7   \n","\n","   ClusterLabel  \n","0             1  \n","1             2  \n","2             0  \n","3             2  \n","4             3  \n"]}]},{"cell_type":"code","source":["X_train_org"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":419},"id":"fzvOx2nu9tPC","executionInfo":{"status":"ok","timestamp":1715237315718,"user_tz":240,"elapsed":195,"user":{"displayName":"Naveenkumar reddy","userId":"00261551837111136383"}},"outputId":"225a3084-c8f6-489e-b499-60ea101e234b"},"execution_count":107,"outputs":[{"output_type":"execute_result","data":{"text/plain":["      Gender  Distance  YearsWorked  PreviousSalary   Salary  DepartmentCode  \\\n","0          0  ~20miles          8.0         63000.0  66000.0               3   \n","1          0  >30miles          7.0         60000.0  63000.0               3   \n","2          0  ~15miles          7.0         59000.0  60000.0               3   \n","3          1    <5mile          3.0         60000.0  61000.0               2   \n","4          1  ~10miles          9.0         56000.0  57000.0               7   \n","...      ...       ...          ...             ...      ...             ...   \n","7495       0  >30miles          5.0         60000.0  62000.0               6   \n","7496       0  ~10miles          7.0         64000.0  68000.0               3   \n","7497       0  ~10miles          8.0         56000.0  57000.0               2   \n","7498       0  ~20miles          6.0         60000.0  62000.0               5   \n","7499       0  ~20miles          5.0         57000.0  58000.0               7   \n","\n","      ClusterLabel  \n","0                1  \n","1                2  \n","2                0  \n","3                2  \n","4                3  \n","...            ...  \n","7495             2  \n","7496             1  \n","7497             3  \n","7498             2  \n","7499             0  \n","\n","[7500 rows x 7 columns]"],"text/html":["\n","  <div id=\"df-34cdad9c-9d53-4520-9f85-fa08fbc0a7ba\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Gender</th>\n","      <th>Distance</th>\n","      <th>YearsWorked</th>\n","      <th>PreviousSalary</th>\n","      <th>Salary</th>\n","      <th>DepartmentCode</th>\n","      <th>ClusterLabel</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0</td>\n","      <td>~20miles</td>\n","      <td>8.0</td>\n","      <td>63000.0</td>\n","      <td>66000.0</td>\n","      <td>3</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>0</td>\n","      <td>&gt;30miles</td>\n","      <td>7.0</td>\n","      <td>60000.0</td>\n","      <td>63000.0</td>\n","      <td>3</td>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>0</td>\n","      <td>~15miles</td>\n","      <td>7.0</td>\n","      <td>59000.0</td>\n","      <td>60000.0</td>\n","      <td>3</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>1</td>\n","      <td>&lt;5mile</td>\n","      <td>3.0</td>\n","      <td>60000.0</td>\n","      <td>61000.0</td>\n","      <td>2</td>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>1</td>\n","      <td>~10miles</td>\n","      <td>9.0</td>\n","      <td>56000.0</td>\n","      <td>57000.0</td>\n","      <td>7</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>7495</th>\n","      <td>0</td>\n","      <td>&gt;30miles</td>\n","      <td>5.0</td>\n","      <td>60000.0</td>\n","      <td>62000.0</td>\n","      <td>6</td>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>7496</th>\n","      <td>0</td>\n","      <td>~10miles</td>\n","      <td>7.0</td>\n","      <td>64000.0</td>\n","      <td>68000.0</td>\n","      <td>3</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>7497</th>\n","      <td>0</td>\n","      <td>~10miles</td>\n","      <td>8.0</td>\n","      <td>56000.0</td>\n","      <td>57000.0</td>\n","      <td>2</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>7498</th>\n","      <td>0</td>\n","      <td>~20miles</td>\n","      <td>6.0</td>\n","      <td>60000.0</td>\n","      <td>62000.0</td>\n","      <td>5</td>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>7499</th>\n","      <td>0</td>\n","      <td>~20miles</td>\n","      <td>5.0</td>\n","      <td>57000.0</td>\n","      <td>58000.0</td>\n","      <td>7</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>7500 rows × 7 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-34cdad9c-9d53-4520-9f85-fa08fbc0a7ba')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-34cdad9c-9d53-4520-9f85-fa08fbc0a7ba button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-34cdad9c-9d53-4520-9f85-fa08fbc0a7ba');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-558cda27-4e0c-4627-aa37-9985d082b4c1\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-558cda27-4e0c-4627-aa37-9985d082b4c1')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-558cda27-4e0c-4627-aa37-9985d082b4c1 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_cc8a5af6-1d45-4b10-a62e-b69924220c08\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('X_train_org')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_cc8a5af6-1d45-4b10-a62e-b69924220c08 button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('X_train_org');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"X_train_org","summary":"{\n  \"name\": \"X_train_org\",\n  \"rows\": 7500,\n  \"fields\": [\n    {\n      \"column\": \"Gender\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Distance\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \">30miles\",\n          \"~10miles\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"YearsWorked\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.8658403228135363,\n        \"min\": 1.0,\n        \"max\": 14.0,\n        \"num_unique_values\": 14,\n        \"samples\": [\n          12.0,\n          13.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"PreviousSalary\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3049.199087886177,\n        \"min\": 48000.0,\n        \"max\": 69000.0,\n        \"num_unique_values\": 22,\n        \"samples\": [\n          63000.0,\n          66000.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Salary\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3228.3958040309362,\n        \"min\": 48000.0,\n        \"max\": 72000.0,\n        \"num_unique_values\": 25,\n        \"samples\": [\n          54000.0,\n          55000.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"DepartmentCode\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2,\n        \"min\": 1,\n        \"max\": 7,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          3,\n          2\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"ClusterLabel\",\n      \"properties\": {\n        \"dtype\": \"int32\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          2,\n          3\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":107}]},{"cell_type":"code","source":[],"metadata":{"id":"IaEcCdSs_pE7","executionInfo":{"status":"ok","timestamp":1715237315718,"user_tz":240,"elapsed":4,"user":{"displayName":"Naveenkumar reddy","userId":"00261551837111136383"}}},"execution_count":107,"outputs":[]},{"cell_type":"code","source":["import pandas as pd\n","\n","# Assuming you have loaded your dataset with cluster labels into a DataFrame called df\n","\n","# Define a dictionary with aggregate functions for each column\n","aggregation = {\n","    'Gender': lambda x: x.mode().iloc[0],  # Mode for categorical values\n","    'Distance': lambda x: x.mode().iloc[0],  # Mode for categorical values\n","    'YearsWorked': 'median',  # Average for continuous values\n","    'PreviousSalary': 'median',  # Average for continuous values\n","    'Salary': 'median',  # Average for continuous values\n","    'DepartmentCode': lambda x: x.mode().iloc[0],  # Mode for categorical values\n","}\n","\n","# Group by 'ClusterLabel' and apply the aggregation functions\n","cluster_stats = X_train_org.groupby('ClusterLabel').agg(aggregation).reset_index()\n","\n","# Print the statistics for each cluster\n","print(cluster_stats)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"vy7aNv07B8Ro","executionInfo":{"status":"ok","timestamp":1715237315718,"user_tz":240,"elapsed":3,"user":{"displayName":"Naveenkumar reddy","userId":"00261551837111136383"}},"outputId":"7e1a3131-2161-4317-c017-faaafe94cac2"},"execution_count":108,"outputs":[{"output_type":"stream","name":"stdout","text":["   ClusterLabel  Gender  Distance  YearsWorked  PreviousSalary   Salary  \\\n","0             0       0  ~10miles          7.0         58000.0  60000.0   \n","1             1       0  ~10miles          7.0         63000.0  66000.0   \n","2             2       0  ~15miles          7.0         61000.0  63000.0   \n","3             3       0  ~10miles          7.0         55000.0  57000.0   \n","\n","   DepartmentCode  \n","0               6  \n","1               1  \n","2               3  \n","3               6  \n"]}]},{"cell_type":"code","source":["# Assuming your original dataset with columns Gender, YearsWorked, PreviousSalary, Salary, DepartmentCode is in a DataFrame called df\n","\n","# Define updated classification rules based on the new statistics\n","def classify_employee_updated(row):\n","    if row['YearsWorked'] > 7.07 and row['PreviousSalary'] > 59339.47 and row['DepartmentCode'] > 4.01:\n","        return 0\n","    else:\n","        return 1  # Assume 'left' for all other cases\n","\n","\n","# Apply classification rules to each row in the DataFrame\n","X_train_org['Left'] = X_train_org.apply(classify_employee, axis=1)\n","# X_train_org = X_train_org.drop('LeftStatus',axis=1)\n","# Print the DataFrame with the classification results\n","print(X_train_org)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"TmqCFPqeB9BV","executionInfo":{"status":"ok","timestamp":1715237928555,"user_tz":240,"elapsed":378,"user":{"displayName":"Naveenkumar reddy","userId":"00261551837111136383"}},"outputId":"7cb46e55-eeaa-4c74-81c9-1cdec4cd3f6f"},"execution_count":128,"outputs":[{"output_type":"stream","name":"stdout","text":["      Gender  Distance  YearsWorked  PreviousSalary   Salary  DepartmentCode  \\\n","0          0  ~20miles          8.0         63000.0  66000.0               3   \n","1          0  >30miles          7.0         60000.0  63000.0               3   \n","2          0  ~15miles          7.0         59000.0  60000.0               3   \n","3          1    <5mile          3.0         60000.0  61000.0               2   \n","4          1  ~10miles          9.0         56000.0  57000.0               7   \n","...      ...       ...          ...             ...      ...             ...   \n","7495       0  >30miles          5.0         60000.0  62000.0               6   \n","7496       0  ~10miles          7.0         64000.0  68000.0               3   \n","7497       0  ~10miles          8.0         56000.0  57000.0               2   \n","7498       0  ~20miles          6.0         60000.0  62000.0               5   \n","7499       0  ~20miles          5.0         57000.0  58000.0               7   \n","\n","      ClusterLabel  Left  \n","0                1     0  \n","1                2     0  \n","2                0     0  \n","3                2     0  \n","4                3     0  \n","...            ...   ...  \n","7495             2     0  \n","7496             1     0  \n","7497             3     0  \n","7498             2     0  \n","7499             0     0  \n","\n","[7500 rows x 8 columns]\n"]}]},{"cell_type":"code","source":["X_train_org.Left.value_counts()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"EwikxeDxC78Y","executionInfo":{"status":"ok","timestamp":1715237933059,"user_tz":240,"elapsed":278,"user":{"displayName":"Naveenkumar reddy","userId":"00261551837111136383"}},"outputId":"db27c099-6559-437b-ad57-44a4b08e8a1c"},"execution_count":129,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Left\n","0    6814\n","1     686\n","Name: count, dtype: int64"]},"metadata":{},"execution_count":129}]},{"cell_type":"markdown","source":["Testing dataset"],"metadata":{"id":"FApw4bgVI4Oa"}},{"cell_type":"code","source":["y_test.columns"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"4OiRvwoLGf3o","executionInfo":{"status":"ok","timestamp":1715237356034,"user_tz":240,"elapsed":139,"user":{"displayName":"Naveenkumar reddy","userId":"00261551837111136383"}},"outputId":"af327f49-6521-471f-f4c2-157345386ea0"},"execution_count":111,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Index(['Left'], dtype='object')"]},"metadata":{},"execution_count":111}]},{"cell_type":"code","source":["import pandas as pd\n","\n","# Merge X_test and y_test into df_test\n","df_test = pd.concat([X_test, y_test], axis=1)\n","\n","\n","# Divide the dataset into two new DataFrames based on 'LeftStatus' values\n","df_test_1 = df_test[df_test['Left'] == 1]\n","df_test_0 = df_test[df_test['Left'] == 0]\n","\n","# Print the first few rows of df_test_1 and df_test_0 to verify\n","print(df_test_1.head())\n","print(df_test_0.head())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"zv2tO5q1HKKj","executionInfo":{"status":"ok","timestamp":1715237383635,"user_tz":240,"elapsed":147,"user":{"displayName":"Naveenkumar reddy","userId":"00261551837111136383"}},"outputId":"7cc7dc04-052c-4bf3-8526-d66c99a9f273"},"execution_count":112,"outputs":[{"output_type":"stream","name":"stdout","text":["    Gender  Distance  YearsWorked  PreviousSalary   Salary  DepartmentCode  \\\n","2        0  ~20miles            8         58000.0  60000.0               7   \n","3        0  >30miles            6         59000.0  61000.0               6   \n","10       1  >30miles           13         52000.0  54000.0               6   \n","23       1  ~15miles            4         61000.0  62000.0               3   \n","25       0  >30miles           12         57000.0  59000.0               2   \n","\n","    Left  \n","2      1  \n","3      1  \n","10     1  \n","23     1  \n","25     1  \n","   Gender  Distance  YearsWorked  PreviousSalary   Salary  DepartmentCode  \\\n","0       1    <5mile            6         59000.0  61000.0               6   \n","1       0  ~15miles            2         58000.0  60000.0               2   \n","4       1  ~10miles            6         58000.0  59000.0               2   \n","5       1    <5mile            7         61000.0  63000.0               3   \n","6       1  ~15miles            4         62000.0  63000.0               3   \n","\n","   Left  \n","0     0  \n","1     0  \n","4     0  \n","5     0  \n","6     0  \n"]}]},{"cell_type":"code","source":["df_test_0.describe()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":297},"id":"_tIBjVWsHWxa","executionInfo":{"status":"ok","timestamp":1715237396559,"user_tz":240,"elapsed":205,"user":{"displayName":"Naveenkumar reddy","userId":"00261551837111136383"}},"outputId":"d0708b1a-b21d-4472-8f47-664d3942c0f1"},"execution_count":113,"outputs":[{"output_type":"execute_result","data":{"text/plain":["            Gender  YearsWorked  PreviousSalary        Salary  DepartmentCode  \\\n","count  1847.000000  1847.000000     1847.000000   1847.000000     1847.000000   \n","mean      0.428262     7.069843    59339.469410  61164.591229        4.014618   \n","std       0.494961     1.861393     3056.009539   3202.616437        2.143625   \n","min       0.000000     2.000000    49000.000000  50000.000000        1.000000   \n","25%       0.000000     6.000000    57000.000000  59000.000000        2.000000   \n","50%       0.000000     7.000000    59000.000000  61000.000000        3.000000   \n","75%       1.000000     8.000000    61000.000000  63000.000000        6.000000   \n","max       1.000000    13.000000    69000.000000  72000.000000        7.000000   \n","\n","         Left  \n","count  1847.0  \n","mean      0.0  \n","std       0.0  \n","min       0.0  \n","25%       0.0  \n","50%       0.0  \n","75%       0.0  \n","max       0.0  "],"text/html":["\n","  <div id=\"df-abd4270c-5037-4185-b7f4-f5c4e6fde7ae\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Gender</th>\n","      <th>YearsWorked</th>\n","      <th>PreviousSalary</th>\n","      <th>Salary</th>\n","      <th>DepartmentCode</th>\n","      <th>Left</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>count</th>\n","      <td>1847.000000</td>\n","      <td>1847.000000</td>\n","      <td>1847.000000</td>\n","      <td>1847.000000</td>\n","      <td>1847.000000</td>\n","      <td>1847.0</td>\n","    </tr>\n","    <tr>\n","      <th>mean</th>\n","      <td>0.428262</td>\n","      <td>7.069843</td>\n","      <td>59339.469410</td>\n","      <td>61164.591229</td>\n","      <td>4.014618</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>std</th>\n","      <td>0.494961</td>\n","      <td>1.861393</td>\n","      <td>3056.009539</td>\n","      <td>3202.616437</td>\n","      <td>2.143625</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>min</th>\n","      <td>0.000000</td>\n","      <td>2.000000</td>\n","      <td>49000.000000</td>\n","      <td>50000.000000</td>\n","      <td>1.000000</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>25%</th>\n","      <td>0.000000</td>\n","      <td>6.000000</td>\n","      <td>57000.000000</td>\n","      <td>59000.000000</td>\n","      <td>2.000000</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>50%</th>\n","      <td>0.000000</td>\n","      <td>7.000000</td>\n","      <td>59000.000000</td>\n","      <td>61000.000000</td>\n","      <td>3.000000</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>75%</th>\n","      <td>1.000000</td>\n","      <td>8.000000</td>\n","      <td>61000.000000</td>\n","      <td>63000.000000</td>\n","      <td>6.000000</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>max</th>\n","      <td>1.000000</td>\n","      <td>13.000000</td>\n","      <td>69000.000000</td>\n","      <td>72000.000000</td>\n","      <td>7.000000</td>\n","      <td>0.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-abd4270c-5037-4185-b7f4-f5c4e6fde7ae')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-abd4270c-5037-4185-b7f4-f5c4e6fde7ae button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-abd4270c-5037-4185-b7f4-f5c4e6fde7ae');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-6b537e58-aa13-444f-8ce4-d1c3133ba447\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-6b537e58-aa13-444f-8ce4-d1c3133ba447')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-6b537e58-aa13-444f-8ce4-d1c3133ba447 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\n  \"name\": \"df_test_0\",\n  \"rows\": 8,\n  \"fields\": [\n    {\n      \"column\": \"Gender\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 652.8655994961963,\n        \"min\": 0.0,\n        \"max\": 1847.0,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0.4282620465619924,\n          1.0,\n          0.4949609137689288\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"YearsWorked\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 650.7532967159221,\n        \"min\": 1.8613928798413006,\n        \"max\": 1847.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          7.069842988630211,\n          7.0,\n          1847.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"PreviousSalary\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 26766.25913880042,\n        \"min\": 1847.0,\n        \"max\": 69000.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          59339.46940985382,\n          59000.0,\n          1847.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Salary\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 27735.42573431815,\n        \"min\": 1847.0,\n        \"max\": 72000.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          61164.591229020036,\n          61000.0,\n          1847.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"DepartmentCode\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 651.745639622271,\n        \"min\": 1.0,\n        \"max\": 1847.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          4.014618299945858,\n          3.0,\n          1847.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Left\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 653.0131124257766,\n        \"min\": 0.0,\n        \"max\": 1847.0,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0.0,\n          1847.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":113}]},{"cell_type":"code","source":["df_test_1.describe()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":297},"id":"Z3-fekQpHZ5t","executionInfo":{"status":"ok","timestamp":1715237405269,"user_tz":240,"elapsed":135,"user":{"displayName":"Naveenkumar reddy","userId":"00261551837111136383"}},"outputId":"8cd9dbb3-a03c-4d27-ac45-7a02fb2bf9d0"},"execution_count":114,"outputs":[{"output_type":"execute_result","data":{"text/plain":["           Gender  YearsWorked  PreviousSalary        Salary  DepartmentCode  \\\n","count  653.000000   653.000000      653.000000    653.000000      653.000000   \n","mean     0.338438     6.891271    59410.413476  61192.955590        3.901991   \n","std      0.473541     1.931845     2827.887305   3008.599025        2.105255   \n","min      0.000000     1.000000    49000.000000  51000.000000        1.000000   \n","25%      0.000000     6.000000    58000.000000  59000.000000        2.000000   \n","50%      0.000000     7.000000    59000.000000  61000.000000        3.000000   \n","75%      1.000000     8.000000    61000.000000  63000.000000        6.000000   \n","max      1.000000    13.000000    67000.000000  70000.000000        7.000000   \n","\n","        Left  \n","count  653.0  \n","mean     1.0  \n","std      0.0  \n","min      1.0  \n","25%      1.0  \n","50%      1.0  \n","75%      1.0  \n","max      1.0  "],"text/html":["\n","  <div id=\"df-8818b2dc-c28b-4194-9c17-6cc39c535fba\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Gender</th>\n","      <th>YearsWorked</th>\n","      <th>PreviousSalary</th>\n","      <th>Salary</th>\n","      <th>DepartmentCode</th>\n","      <th>Left</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>count</th>\n","      <td>653.000000</td>\n","      <td>653.000000</td>\n","      <td>653.000000</td>\n","      <td>653.000000</td>\n","      <td>653.000000</td>\n","      <td>653.0</td>\n","    </tr>\n","    <tr>\n","      <th>mean</th>\n","      <td>0.338438</td>\n","      <td>6.891271</td>\n","      <td>59410.413476</td>\n","      <td>61192.955590</td>\n","      <td>3.901991</td>\n","      <td>1.0</td>\n","    </tr>\n","    <tr>\n","      <th>std</th>\n","      <td>0.473541</td>\n","      <td>1.931845</td>\n","      <td>2827.887305</td>\n","      <td>3008.599025</td>\n","      <td>2.105255</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>min</th>\n","      <td>0.000000</td>\n","      <td>1.000000</td>\n","      <td>49000.000000</td>\n","      <td>51000.000000</td>\n","      <td>1.000000</td>\n","      <td>1.0</td>\n","    </tr>\n","    <tr>\n","      <th>25%</th>\n","      <td>0.000000</td>\n","      <td>6.000000</td>\n","      <td>58000.000000</td>\n","      <td>59000.000000</td>\n","      <td>2.000000</td>\n","      <td>1.0</td>\n","    </tr>\n","    <tr>\n","      <th>50%</th>\n","      <td>0.000000</td>\n","      <td>7.000000</td>\n","      <td>59000.000000</td>\n","      <td>61000.000000</td>\n","      <td>3.000000</td>\n","      <td>1.0</td>\n","    </tr>\n","    <tr>\n","      <th>75%</th>\n","      <td>1.000000</td>\n","      <td>8.000000</td>\n","      <td>61000.000000</td>\n","      <td>63000.000000</td>\n","      <td>6.000000</td>\n","      <td>1.0</td>\n","    </tr>\n","    <tr>\n","      <th>max</th>\n","      <td>1.000000</td>\n","      <td>13.000000</td>\n","      <td>67000.000000</td>\n","      <td>70000.000000</td>\n","      <td>7.000000</td>\n","      <td>1.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-8818b2dc-c28b-4194-9c17-6cc39c535fba')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-8818b2dc-c28b-4194-9c17-6cc39c535fba button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-8818b2dc-c28b-4194-9c17-6cc39c535fba');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-68423ef7-64b9-4461-8e1c-237c6fe98184\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-68423ef7-64b9-4461-8e1c-237c6fe98184')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-68423ef7-64b9-4461-8e1c-237c6fe98184 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\n  \"name\": \"df_test_1\",\n  \"rows\": 8,\n  \"fields\": [\n    {\n      \"column\": \"Gender\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 230.72871200477746,\n        \"min\": 0.0,\n        \"max\": 653.0,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0.33843797856049007,\n          1.0,\n          0.47354103795662356\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"YearsWorked\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 228.68690847854464,\n        \"min\": 1.0,\n        \"max\": 653.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          6.891271056661562,\n          7.0,\n          653.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"PreviousSalary\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 26919.444680618402,\n        \"min\": 653.0,\n        \"max\": 67000.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          59410.4134762634,\n          59000.0,\n          653.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Salary\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 27824.3099860929,\n        \"min\": 653.0,\n        \"max\": 70000.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          61192.95558958653,\n          61000.0,\n          653.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"DepartmentCode\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 229.61642845423836,\n        \"min\": 1.0,\n        \"max\": 653.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          3.901990811638591,\n          3.0,\n          653.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Left\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 230.5675838323456,\n        \"min\": 0.0,\n        \"max\": 653.0,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          653.0,\n          1.0,\n          0.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":114}]},{"cell_type":"code","source":[],"metadata":{"id":"LB8FgyL3KoJ3"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["X_train_encoded.columns"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"CpEtx-kyKptH","executionInfo":{"status":"ok","timestamp":1715238295972,"user_tz":240,"elapsed":155,"user":{"displayName":"Naveenkumar reddy","userId":"00261551837111136383"}},"outputId":"3b17ba23-be90-4656-ace4-00328913a2b8"},"execution_count":134,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Index(['YearsWorked', 'PreviousSalary', 'Salary', 'Gender_0', 'Gender_1',\n","       'Distance_<5mile', 'Distance_>30miles', 'Distance_~10miles',\n","       'Distance_~15miles', 'Distance_~20miles', 'DepartmentCode_1',\n","       'DepartmentCode_2', 'DepartmentCode_3', 'DepartmentCode_5',\n","       'DepartmentCode_6', 'DepartmentCode_7', 'ClusterLabel'],\n","      dtype='object')"]},"metadata":{},"execution_count":134}]},{"cell_type":"code","source":["X_train_final = X_train_encoded.drop('ClusterLabel',axis=1)\n","y_train_final = X_train_org['Left']"],"metadata":{"id":"BiUBa7FZHcDi","executionInfo":{"status":"ok","timestamp":1715238363362,"user_tz":240,"elapsed":147,"user":{"displayName":"Naveenkumar reddy","userId":"00261551837111136383"}}},"execution_count":135,"outputs":[]},{"cell_type":"code","source":["from sklearn.model_selection import GridSearchCV\n","from sklearn.linear_model import LogisticRegression\n","from sklearn.ensemble import RandomForestClassifier\n","from sklearn.svm import SVC\n","from sklearn.metrics import accuracy_score\n","\n","# Define the classifiers and their respective parameter grids for Grid Search CV\n","classifiers = {\n","    'Logistic Regression': LogisticRegression(max_iter=1000),\n","    'Random Forest': RandomForestClassifier(),\n","    'Support Vector Machine': SVC()\n","}\n","\n","param_grids = {\n","    'Logistic Regression': {'C': [0.1, 1, 10]},\n","    'Random Forest': {'n_estimators': [50, 100, 150], 'max_depth': [None, 5, 10]},\n","    'Support Vector Machine': {'C': [0.1, 1, 10], 'gamma': [0.1, 1, 10]}\n","}\n","\n","# Perform Grid Search CV for each classifier\n","results = {}\n","for clf_name, clf in classifiers.items():\n","    grid_search = GridSearchCV(clf, param_grids[clf_name], cv=5, scoring='accuracy')\n","    grid_search.fit(X_train_final, y_train_final)\n","    best_params = grid_search.best_params_\n","    best_clf = grid_search.best_estimator_\n","    y_pred = best_clf.predict(X_test_encoded)\n","    accuracy = accuracy_score(y_test, y_pred)\n","    results[clf_name] = {'Best Params': best_params, 'Accuracy on Test Data': accuracy}\n","\n","# Print the results in a table format\n","print(\"Algorithm\\t\\tBest Params\\t\\tAccuracy on Test Data\")\n","print(\"------------------------------------------------------------\")\n","for clf_name, result in results.items():\n","    print(f\"{clf_name}\\t{result['Best Params']}\\t\\t{result['Accuracy on Test Data']:.4f}\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"-gWFVT48JyU4","executionInfo":{"status":"ok","timestamp":1715239104807,"user_tz":240,"elapsed":112811,"user":{"displayName":"Naveenkumar reddy","userId":"00261551837111136383"}},"outputId":"3624e143-df60-4498-9286-f98f7e457c63"},"execution_count":143,"outputs":[{"output_type":"stream","name":"stdout","text":["Algorithm\t\tBest Params\t\tAccuracy on Test Data\n","------------------------------------------------------------\n","Logistic Regression\t{'C': 0.1}\t\t0.7372\n","Random Forest\t{'max_depth': None, 'n_estimators': 50}\t\t0.6964\n","Support Vector Machine\t{'C': 10, 'gamma': 0.1}\t\t0.6956\n"]}]},{"cell_type":"code","source":["from sklearn.neural_network import MLPClassifier\n","\n","# Define the Neural Network classifier and its parameter grid for Grid Search CV\n","nn_classifier = MLPClassifier(max_iter=1000, random_state=42)\n","\n","param_grid_nn = {\n","    'hidden_layer_sizes': [(50,), (100,), (50, 50), (100, 100)],\n","    'activation': ['relu', 'tanh'],\n","    'solver': ['adam', 'sgd'],\n","    'alpha': [0.0001, 0.001, 0.01],\n","}\n","\n","# Perform Grid Search CV for Neural Network\n","grid_search_nn = GridSearchCV(nn_classifier, param_grid_nn, cv=5, scoring='accuracy')\n","grid_search_nn.fit(X_train_final, y_train_final)\n","best_params_nn = grid_search_nn.best_params_\n","best_nn = grid_search_nn.best_estimator_\n","y_pred_nn = best_nn.predict(X_test_encoded)\n","accuracy_nn = accuracy_score(y_test, y_pred_nn)\n","\n","# Print the results for Neural Network\n","print(\"Neural Network:\")\n","print(\"Best Params:\", best_params_nn)\n","print(\"Accuracy on Test Data:\", accuracy_nn)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"jqeenfB_ObOA","executionInfo":{"status":"ok","timestamp":1715239832563,"user_tz":240,"elapsed":283723,"user":{"displayName":"Naveenkumar reddy","userId":"00261551837111136383"}},"outputId":"15d21b81-a851-4b5c-9c19-4b92cdb9bebb"},"execution_count":145,"outputs":[{"output_type":"stream","name":"stdout","text":["Neural Network:\n","Best Params: {'activation': 'relu', 'alpha': 0.01, 'hidden_layer_sizes': (50,), 'solver': 'adam'}\n","Accuracy on Test Data: 0.7388\n"]}]},{"cell_type":"code","source":["from sklearn.model_selection import GridSearchCV\n","from sklearn.linear_model import LogisticRegression\n","from sklearn.metrics import accuracy_score\n","\n","# Define the Logistic Regression classifier and its updated parameter grid for Grid Search CV\n","logreg_classifier = LogisticRegression(max_iter=1000)\n","\n","param_grid_logreg = {\n","    'C': [0.01,0.005,0.1, 1, 5.5, 10, 30, 90],\n","}\n","\n","# Perform Grid Search CV for Logistic Regression\n","grid_search_logreg = GridSearchCV(logreg_classifier, param_grid_logreg, cv=5, scoring='accuracy')\n","grid_search_logreg.fit(X_train_final, y_train_final)\n","best_params_logreg = grid_search_logreg.best_params_\n","best_logreg = grid_search_logreg.best_estimator_\n","y_pred_logreg = best_logreg.predict(X_test_encoded)\n","accuracy_logreg = accuracy_score(y_test, y_pred_logreg)\n","\n","# Print the results for Logistic Regression\n","print(\"Logistic Regression:\")\n","print(\"Best Params:\", best_params_logreg)\n","print(\"Accuracy on Test Data:\", accuracy_logreg)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"BdAMvZhEPnbC","executionInfo":{"status":"ok","timestamp":1715240140845,"user_tz":240,"elapsed":3478,"user":{"displayName":"Naveenkumar reddy","userId":"00261551837111136383"}},"outputId":"4373c833-babf-4c03-e0db-a281f5c7f5d3"},"execution_count":147,"outputs":[{"output_type":"stream","name":"stdout","text":["Logistic Regression:\n","Best Params: {'C': 0.005}\n","Accuracy on Test Data: 0.7376\n"]}]},{"cell_type":"code","source":["from sklearn.metrics import classification_report\n","\n","# Calculate the classification report for Logistic Regression\n","classification_report_logreg = classification_report(y_test, y_pred_logreg)\n","\n","# Print the classification report\n","print(\"Classification Report for Logistic Regression:\")\n","print(classification_report_logreg)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"GbIj-UmORt-g","executionInfo":{"status":"ok","timestamp":1715240235704,"user_tz":240,"elapsed":174,"user":{"displayName":"Naveenkumar reddy","userId":"00261551837111136383"}},"outputId":"306c808e-f861-40b8-b9bf-9ca2186889ee"},"execution_count":148,"outputs":[{"output_type":"stream","name":"stdout","text":["Classification Report for Logistic Regression:\n","              precision    recall  f1-score   support\n","\n","           0       0.74      1.00      0.85      1847\n","           1       0.33      0.00      0.01       653\n","\n","    accuracy                           0.74      2500\n","   macro avg       0.54      0.50      0.43      2500\n","weighted avg       0.63      0.74      0.63      2500\n","\n"]}]},{"cell_type":"code","source":[],"metadata":{"id":"gP_H_88DSPEd"},"execution_count":null,"outputs":[]}]}